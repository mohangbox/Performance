<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="pdf" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">300</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="pdfnouse" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
import java.io.FileInputStream;</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="pdfFileMove" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//***************************
//Config details:
//1. All the path to be updated correctly.
//2. Update the order number creation to pdfFileName
//***************************

package com.create.test;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Properties;
import java.util.Random;
import java.util.stream.IntStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.lang.reflect.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;    
import java.nio.file.StandardCopyOption;
import java.io.*;
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;
  
int maxfileint = 1;

//Locate current script path
String testPlanFile = GuiPackage.getInstance().getTestPlanFile();
String testPlanFileDir = FilenameUtils.getFullPathNoEndSeparator(testPlanFile);
vars.put(&quot;testPlanFileDir&quot;, testPlanFileDir);

			String pdfFileName = &quot;PDFOrderIDGen&quot;;
			String pdfSampleCompletePath = &quot;\\\\clbflncolq22\\edoc\\2022_test_pdf_edoc_01.pdf&quot;;
			String pdfdestinationpartial = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\pdf\\&quot;;
			String xmlfilepartialpath = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\xml_pdf\\new\\&quot;;
			String finalDestinationPath = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\xml_pdf\\&quot;;
			String csvFileWritePath	= 	testPlanFileDir + &quot;\\TestData\\&quot;+ pdfFileName +&quot;.csv&quot;;
			
			File pdfSampleCompletePathFile = new File(pdfSampleCompletePath);
			Random random = new Random();

			for (int i = 1; i &lt;= maxfileint; i++) {
	
    //location num  for [ONLY for QA/DEV]
    int randomloc = random.nextInt(19)+9980;				//For testing the store number starts from 9980 to 9999 for QA/DEV
    String loc_num = randomloc.toString();

   //location num for [ONLY for PROD] For production The store number should be 9999
   //String loc_num = &quot;9999&quot;;

    	//order number
    int randomorder = random.nextInt(8999)+1000;          				//6 digits ramdon number -  random.nextInt(899999)+100000; 
    String order_num = &quot;99&quot; + randomorder.toString();     				//For testing purpose appending with 99 for uniqueness identification

    //Pay type method
    String paytypemethod = &quot;CAF&quot;;

    //locstate
    String stateName = &quot;QA&quot;;										//QA, DV, PR

    //Corpcopydate
    Date date = new Date();
    String pattern = &quot;MM/dd/yyyy HH:mm:ss&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
    String corpCopydt = simpleDateFormat.format(date);
    log.info(&quot;CorpcopyDate Format: &quot; + corpCopydt);

    // Year to write in csv file
    String writeYear = &quot;yyyy&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(writeYear);
    String fileWriteYear = simpleDateFormat.format(date);
	
    //File Name conversion
    String filename = &quot;Performance-CLBFLNLDTQ21&quot;;						//Performance-ELBFLNLDTQ21
    String patternformat = &quot;MMddyyyyHHmmss&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(patternformat);
    String corpCopydt1 = simpleDateFormat.format(date);
    int randomsec = random.nextInt(899)+100;
    String milisec = randomsec.toString();
    String fineNameConversion = order_num + &quot;-&quot; + loc_num + &quot;-&quot; + corpCopydt1 + milisec + &quot;UTC&quot; + &quot;-&quot; + filename;
    log.info(&quot;FineNameConversion: &quot; + fineNameConversion);

    //Image file name
    String image_filename = loc_num + &quot;-&quot; + corpCopydt1 + milisec + &quot;-&quot; + order_num;
    log.info(&quot;Image file Name: &quot; + image_filename);

    //Description
    String descript = &quot;Performance-Test-CLBFLNLDTQ21&quot;; 				//Performance-Test-ELBFLNLDTQ21

    //Stock number
    int randomstck = random.nextInt(8999999)+ 1000000;
    String StockNo = randomstck.toString();

    //Vin No
    String vinNo = &quot;1GCCS1442W8181753&quot;;  							//1GCCS1442W8181753

    //isVaulted
    String isVaulte = &quot;TRUE&quot;;

    //form dec
    String formdec = &quot;*** This is sample Document pdf for testing ***&quot;;	//*** This is sample Document pdf for testing ***
				
	String pdfdestinationPath = pdfdestinationpartial + fineNameConversion +&quot;.pdf&quot;;
	log.info(pdfdestinationPath);
				
	InputStream inStream = null;
     OutputStream outStream = null;

        File inputFile =new File(pdfSampleCompletePath);
        File outputFile =new File(pdfdestinationPath);

        inStream = new FileInputStream(inputFile);
        outStream = new FileOutputStream(outputFile);

        byte[] buffer = new byte[1024];


        int fileLength;
        while ((fileLength = inStream.read(buffer)) &gt; 0){

              outStream.write(buffer, 0, fileLength );

              }

        inStream.close();
        outStream.close();
				
				
				DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
				DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
				Document doc = dBuilder.newDocument();

				// root vehicles element
				Element rootElement = doc.createElement(&quot;vehicles&quot;);
				doc.appendChild(rootElement);

				// vehicle element
				Element vehicle = doc.createElement(&quot;vehicle&quot;);
				rootElement.appendChild(vehicle);

				// element
				Element locnum = doc.createElement(&quot;locnum&quot;);
				locnum.appendChild(doc.createTextNode(loc_num));
				vehicle.appendChild(locnum);

				Element ordernumber = doc.createElement(&quot;ordernumber&quot;);
				ordernumber.appendChild(doc.createTextNode(order_num));
				vehicle.appendChild(ordernumber);

				//Element customerid = doc.createElement(&quot;customerid&quot;);
				//customerid.appendChild(doc.createTextNode(&quot;&quot;));
				//vehicle.appendChild(customerid);
			      
				Element paytype = doc.createElement(&quot;paytype&quot;);
				paytype.appendChild(doc.createTextNode(paytypemethod));
				vehicle.appendChild(paytype);

				Element locstate = doc.createElement(&quot;locstate&quot;);
				locstate.appendChild(doc.createTextNode(stateName));
				vehicle.appendChild(locstate);

				Element imagefilename = doc.createElement(&quot;imagefilename&quot;);
				imagefilename.appendChild(doc.createTextNode(image_filename));
				vehicle.appendChild(imagefilename);

				Element corpcopydt = doc.createElement(&quot;corpcopydt&quot;);
				corpcopydt.appendChild(doc.createTextNode(corpCopydt));
				vehicle.appendChild(corpcopydt);

				Element docpath = doc.createElement(&quot;docpath&quot;);
				docpath.appendChild(doc.createTextNode(pdfdestinationPath));
				vehicle.appendChild(docpath);

				Element stocknum = doc.createElement(&quot;stocknum&quot;);
				stocknum.appendChild(doc.createTextNode(StockNo));
				vehicle.appendChild(stocknum);

				Element vin = doc.createElement(&quot;vin&quot;);
				vin.appendChild(doc.createTextNode(vinNo));
				vehicle.appendChild(vin);

				Element paytype = doc.createElement(&quot;paytype&quot;);
				paytype.appendChild(doc.createTextNode(paytypemethod));
				vehicle.appendChild(paytype);

				Element isVaulted = doc.createElement(&quot;isVaulted&quot;);
				isVaulted.appendChild(doc.createTextNode(isVaulte));
				vehicle.appendChild(isVaulted);

				Element forms = doc.createElement(&quot;forms&quot;);
				forms.appendChild(doc.createTextNode(formdec));
				vehicle.appendChild(forms);

				// write the content into xml file
				TransformerFactory transformerFactory = TransformerFactory.newInstance();
				Transformer transformer = transformerFactory.newTransformer();
				DOMSource source = new DOMSource(doc);

	StreamResult result = new StreamResult(new File(xmlfilepartialpath + fineNameConversion + &quot;.xml&quot;));
    transformer.transform(source, result);

    //Copy the file from xml to previous folder
    String copySourcePath = (xmlfilepartialpath + fineNameConversion + &quot;.xml&quot;);
    String copyDestinationPath = (finalDestinationPath + fineNameConversion + &quot;.xml&quot;);

    //Files.move(Paths.get(copySourcePath), Paths.get(copyDestinationPath), StandardCopyOption.ATOMIC_MOVE);

	
    vars.put(&quot;copySourcePath&quot;, copySourcePath);
    vars.put(&quot;copyDestinationPath&quot;, copyDestinationPath);   

	// Write Order number to the file
	FileWriter fWriter = new FileWriter(csvFileWritePath, true);
	BufferedWriter buff = new BufferedWriter(fWriter);
	buff.write(&quot;\n&quot; + loc_num + &quot;,&quot; + fileWriteYear + &quot;,&quot; + order_num + &quot;,&quot; + corpCopydt);
	buff.close();
	fWriter.close();

 }
</stringProp>
            <stringProp name="scriptLanguage">bsh</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler pdf" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">move</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${copySourcePath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${copyDestinationPath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="tiff-Min" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">300</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="tiff-Min" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
import com.create.test.java.io.File;
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="tiff-min" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//***************************
//Config details:
//1. All the path to be updated correctly.
//2. Assign MIN, MEDIAN, MAXIMUM to &quot;tiffFileCreationtype&quot; based on tiff file Creation and size.
//***************************

package com.create.test;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Properties;
import java.util.Random;
import java.util.stream.IntStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.lang.reflect.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;
import java.io.*;  
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;  

int maxfileint = 1;

//Locate current script path
String testPlanFile = GuiPackage.getInstance().getTestPlanFile();
String testPlanFileDir = FilenameUtils.getFullPathNoEndSeparator(testPlanFile);
vars.put(&quot;testPlanFileDir&quot;, testPlanFileDir);

String tiffFileCreationtype =&quot;MIN&quot;; 	//MIN, MEDIAN, MAXIMUM; i.e., Min file size- &gt;98kb, Median file size &gt;250kb, Max file size- &gt; 590kb

String tiffSampleCompletePath = &quot;\\\\clbflncolq22\\edoc\\2022_test_tiff_edoc_01_&quot;+ tiffFileCreationtype +&quot;.tiff&quot;;  
String tiffdestinationpartial = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\tiff\\&quot;;
String xmlfilepartialpath = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\xml_tiff\\new\\&quot;;
String finalDestinationPath = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\xml_tiff\\&quot;;
String csvFileWritePath	= 	testPlanFileDir + &quot;\\TestData\\TiffDMSId_Save.csv&quot;;

File tiffSampleCompletePathFile = new File(tiffSampleCompletePath);

Random random = new Random();

for (int i = 1; i &lt;= maxfileint; i++) {

    //dmsimageid 
	int randomint = random.nextInt(8999)+1000;				//6 digits ramdon number 
    	String dms_id = &quot;99&quot; + randomint.toString();				//For testing purpose appending with 99 for uniqueness identification
	
    //location num  for [ONLY for QA/DEV]
    int randomloc = random.nextInt(19)+9980;				//For testing the store number starts from 9980 to 9999 for QA/DEV
    String loc_num = randomloc.toString();

   //location num for [ONLY for PROD] For production The store number should be 9999
   //String loc_num = &quot;9999&quot;;

    //locstate
    String stateName = &quot;QA&quot;;								//QA, DV, PR

    //referencenum
    int randomref = random.nextInt(8999)+1000;				//6 digits ramdon number -  random.nextInt(899999)+100000; 
    String referenceNo = &quot;99&quot; + randomref.toString();		     //For testing purpose appending with 99 for uniqueness identification
   				

    //Image description
    String imagefiledec = &quot;Performance&quot;;					//Performance

    //Corpcopydate
    Date date = new Date();
    String pattern = &quot;MM/dd/yyyy HH:mm:ss&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
    String corpCopydt = simpleDateFormat.format(date);

    // Year to write in csv file
    String writeYear = &quot;yyyy&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(writeYear);
    String fileWriteYear = simpleDateFormat.format(date);

    //File Name conversion
    String filename = &quot;CLBFLNLDTQ21&quot;;						//ELBFLNLDTQ21				
    String patternformat = &quot;MMddyyyyHHmmss&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(patternformat);
    String corpCopydt1 = simpleDateFormat.format(date);
    int randomsec = random.nextInt(899)+100;
    String milisec = randomsec.toString();
    String fineNameConversion = referenceNo + &quot;-&quot; + loc_num + &quot;-&quot; + corpCopydt1 + milisec + &quot;UTC&quot; + &quot;-&quot; + imagefiledec + &quot;-&quot; + filename;
    log.info(&quot;FineNameConversion: &quot; + fineNameConversion);

    //dms doc type
    String dms_doc_type = &quot;2&quot;;

    //form id
    int randomformid = random.nextInt(8999999) + 1000000;
    String formnum = randomformid.toString();

    //Version id
    int randomver = random.nextInt(8)+1;
    String version_id = randomver.toString();

    //Description
    String descript = &quot;Performance-Test-CLBFLNLDTQ21&quot;;				//Performance-Test-ELBFLNLDTQ21
    
    //Vin No
    String vinNo = &quot;1GCCS1442W8181753&quot;;							//1GCCS1442W8181753

    //Stock number
    int randomstck = random.nextInt(89999999) + 10000000;
    String StockNo = randomstck.toString();

    //Pay type method
    String paytypemethod = &quot;CAF&quot;;

    //isVaulted
    String isVaulte = &quot;TRUE&quot;;

    String tiffdestinationPath = tiffdestinationpartial + fineNameConversion + &quot;.tiff&quot;;

    //System.out.println(&quot;file copy&quot;);
    log.info(tiffdestinationPath);

    InputStream inStream = null;
    OutputStream outStream = null;

    File inputFile = new File(tiffSampleCompletePath);
    File outputFile = new File(tiffdestinationPath);

    inStream = new FileInputStream(inputFile);
    outStream = new FileOutputStream(outputFile);

    byte[] buffer = new byte[1024];


    int fileLength;
    while ((fileLength = inStream.read(buffer)) &gt; 0) {
        outStream.write(buffer, 0, fileLength);
    }

    inStream.close();
    outStream.close();

    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
    Document doc = dBuilder.newDocument();

    // root vehicles element
    Element rootElement = doc.createElement(&quot;vehicles&quot;);
    doc.appendChild(rootElement);

    // vehicle element
    Element vehicle = doc.createElement(&quot;vehicle&quot;);
    rootElement.appendChild(vehicle);

    // element
    Element dmsimageid = doc.createElement(&quot;dmsimageid&quot;);
    dmsimageid.appendChild(doc.createTextNode(dms_id));
    vehicle.appendChild(dmsimageid);

    Element locnum = doc.createElement(&quot;locnum&quot;);
    locnum.appendChild(doc.createTextNode(loc_num));
    vehicle.appendChild(locnum);

    Element locstate = doc.createElement(&quot;locstate&quot;);
    locstate.appendChild(doc.createTextNode(stateName));
    vehicle.appendChild(locstate);

    Element imagefilename = doc.createElement(&quot;imagefilename&quot;);
    imagefilename.appendChild(doc.createTextNode(imagefiledec));
    vehicle.appendChild(imagefilename);

    Element corpcopydt = doc.createElement(&quot;corpcopydt&quot;);
    corpcopydt.appendChild(doc.createTextNode(corpCopydt)); // Formate: &quot;10/04/2022 12:00:00&quot;
    vehicle.appendChild(corpcopydt);

    Element docpath = doc.createElement(&quot;docpath&quot;);
    docpath.appendChild(doc.createTextNode(tiffdestinationPath));
    vehicle.appendChild(docpath);

    Element referencenum = doc.createElement(&quot;referencenum&quot;);
    referencenum.appendChild(doc.createTextNode(referenceNo));
    vehicle.appendChild(referencenum);

    Element dmsdoctype = doc.createElement(&quot;dmsdoctype&quot;);
    dmsdoctype.appendChild(doc.createTextNode(dms_doc_type));
    vehicle.appendChild(dmsdoctype);

    Element formid = doc.createElement(&quot;formid&quot;);
    formid.appendChild(doc.createTextNode(formnum));
    vehicle.appendChild(formid);

    Element versionid = doc.createElement(&quot;versionid&quot;);
    versionid.appendChild(doc.createTextNode(version_id));
    vehicle.appendChild(versionid);

    Element description = doc.createElement(&quot;description&quot;);
    description.appendChild(doc.createTextNode(descript));
    vehicle.appendChild(description);

    Element stocknum = doc.createElement(&quot;stocknum&quot;);
    stocknum.appendChild(doc.createTextNode(StockNo));
    vehicle.appendChild(stocknum);

    Element vin = doc.createElement(&quot;vin&quot;);
    vin.appendChild(doc.createTextNode(vinNo));
    vehicle.appendChild(vin);

    Element paytype = doc.createElement(&quot;paytype&quot;);
    paytype.appendChild(doc.createTextNode(paytypemethod));
    vehicle.appendChild(paytype);

    Element isVaulted = doc.createElement(&quot;isVaulted&quot;);
    isVaulted.appendChild(doc.createTextNode(isVaulte));
    vehicle.appendChild(isVaulted);

    // write the content into xml file
    TransformerFactory transformerFactory = TransformerFactory.newInstance();
    Transformer transformer = transformerFactory.newTransformer();
    DOMSource source = new DOMSource(doc);

    StreamResult result = new StreamResult(new File(xmlfilepartialpath + fineNameConversion + &quot;.xml&quot;));
    transformer.transform(source, result);

    //Copy the file from xml to previous folder
    String copySourcePath = (xmlfilepartialpath + fineNameConversion + &quot;.xml&quot;);
    String copyDestinationPath = (finalDestinationPath + fineNameConversion + &quot;.xml&quot;);

    vars.put(&quot;copySourcePath&quot;, copySourcePath);
    vars.put(&quot;copyDestinationPath&quot;, copyDestinationPath);

    	// Write Order number to the file
	FileWriter fWriter = new FileWriter(csvFileWritePath, true);
	BufferedWriter buff = new BufferedWriter(fWriter);
	buff.write(&quot;\n&quot; + loc_num + &quot;,&quot; + fileWriteYear + &quot;,&quot; + dms_id + &quot;,&quot; + corpCopydt);
	buff.close();
	fWriter.close();
}</stringProp>
            <stringProp name="scriptLanguage">bsh</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler tiff" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">move</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${copySourcePath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${copyDestinationPath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="tiff-Medium" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">10</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="tiff-Medium" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
import com.create.test.java.io.File;
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="tiff-medium" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//***************************
//Config details:
//1. All the path to be updated correctly.
//2. Assign MIN, MEDIAN, MAXIMUM to &quot;tiffFileCreationtype&quot; based on tiff file Creation and size.
//***************************

package com.create.test;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Properties;
import java.util.Random;
import java.util.stream.IntStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.lang.reflect.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;
import java.io.*;    
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;
	
int maxfileint = 1;

//Locate current script path
String testPlanFile = GuiPackage.getInstance().getTestPlanFile();
String testPlanFileDir = FilenameUtils.getFullPathNoEndSeparator(testPlanFile);
vars.put(&quot;testPlanFileDir&quot;, testPlanFileDir);

String tiffFileCreationtype =&quot;MEDIAN&quot;; 	//MIN, MEDIAN, MAXIMUM; i.e., Min file size- &gt;98kb, Median file size &gt;250kb, Max file size- &gt; 590kb

String tiffSampleCompletePath = &quot;\\\\clbflncolq22\\edoc\\2022_test_tiff_edoc_01_&quot;+ tiffFileCreationtype +&quot;.tiff&quot;;  
String tiffdestinationpartial = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\tiff\\&quot;;
String xmlfilepartialpath = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\xml_tiff\\new\\&quot;;
String finalDestinationPath = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\xml_tiff\\&quot;;
String csvFileWritePath	= 	testPlanFileDir + &quot;\\TestData\\TiffDMSId_Save.csv&quot;;

File tiffSampleCompletePathFile = new File(tiffSampleCompletePath);

Random random = new Random();

for (int i = 1; i &lt;= maxfileint; i++) {


    //dmsimageid 
	int randomint = random.nextInt(8999)+1000;				//6 digits ramdon number 
    	String dms_id = &quot;99&quot; + randomint.toString();				//For testing purpose appending with 99 for uniqueness identification
	
    //location num  for [ONLY for QA/DEV]
    int randomloc = random.nextInt(19)+9980;				//For testing the store number starts from 9980 to 9999 for QA/DEV
    String loc_num = randomloc.toString();

   //location num for [ONLY for PROD] For production The store number should be 9999
   //String loc_num = &quot;9999&quot;;

    //locstate
    String stateName = &quot;QA&quot;;								//QA, DV, PR

    //referencenum
    int randomref = random.nextInt(8999)+1000;				//6 digits ramdon number -  random.nextInt(899999)+100000; 
    String referenceNo = &quot;99&quot; + randomref.toString();		     //For testing purpose appending with 99 for uniqueness identification
   				

    //Image description
    String imagefiledec = &quot;Performance&quot;;					//Performance

    //Corpcopydate
    Date date = new Date();
    String pattern = &quot;MM/dd/yyyy HH:mm:ss&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
    String corpCopydt = simpleDateFormat.format(date);

    // Year to write in csv file
    String writeYear = &quot;yyyy&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(writeYear);
    String fileWriteYear = simpleDateFormat.format(date);

    //File Name conversion
    String filename = &quot;CLBFLNLDTQ21&quot;;						//ELBFLNLDTQ21				
    String patternformat = &quot;MMddyyyyHHmmss&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(patternformat);
    String corpCopydt1 = simpleDateFormat.format(date);
    int randomsec = random.nextInt(899)+100;
    String milisec = randomsec.toString();
    String fineNameConversion = referenceNo + &quot;-&quot; + loc_num + &quot;-&quot; + corpCopydt1 + milisec + &quot;UTC&quot; + &quot;-&quot; + imagefiledec + &quot;-&quot; + filename;
    log.info(&quot;FineNameConversion: &quot; + fineNameConversion);

    //dms doc type
    String dms_doc_type = &quot;2&quot;;

    //form id
    int randomformid = random.nextInt(8999999) + 1000000;
    String formnum = randomformid.toString();

    //Version id
    int randomver = random.nextInt(8)+1;
    String version_id = randomver.toString();

    //Description
    String descript = &quot;Performance-Test-CLBFLNLDTQ21&quot;;				//Performance-Test-ELBFLNLDTQ21
    
    //Vin No
    String vinNo = &quot;1GCCS1442W8181753&quot;;							//1GCCS1442W8181753

    //Stock number
    int randomstck = random.nextInt(89999999) + 10000000;
    String StockNo = randomstck.toString();

    //Pay type method
    String paytypemethod = &quot;CAF&quot;;

    //isVaulted
    String isVaulte = &quot;TRUE&quot;;

    String tiffdestinationPath = tiffdestinationpartial + fineNameConversion + &quot;.tiff&quot;;

    //System.out.println(&quot;file copy&quot;);
    log.info(tiffdestinationPath);

    InputStream inStream = null;
    OutputStream outStream = null;

    File inputFile = new File(tiffSampleCompletePath);
    File outputFile = new File(tiffdestinationPath);

    inStream = new FileInputStream(inputFile);
    outStream = new FileOutputStream(outputFile);

    byte[] buffer = new byte[1024];


    int fileLength;
    while ((fileLength = inStream.read(buffer)) &gt; 0) {
        outStream.write(buffer, 0, fileLength);
    }

    inStream.close();
    outStream.close();

    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
    Document doc = dBuilder.newDocument();

    // root vehicles element
    Element rootElement = doc.createElement(&quot;vehicles&quot;);
    doc.appendChild(rootElement);

    // vehicle element
    Element vehicle = doc.createElement(&quot;vehicle&quot;);
    rootElement.appendChild(vehicle);

    // element
    Element dmsimageid = doc.createElement(&quot;dmsimageid&quot;);
    dmsimageid.appendChild(doc.createTextNode(dms_id));
    vehicle.appendChild(dmsimageid);

    Element locnum = doc.createElement(&quot;locnum&quot;);
    locnum.appendChild(doc.createTextNode(loc_num));
    vehicle.appendChild(locnum);

    Element locstate = doc.createElement(&quot;locstate&quot;);
    locstate.appendChild(doc.createTextNode(stateName));
    vehicle.appendChild(locstate);

    Element imagefilename = doc.createElement(&quot;imagefilename&quot;);
    imagefilename.appendChild(doc.createTextNode(imagefiledec));
    vehicle.appendChild(imagefilename);

    Element corpcopydt = doc.createElement(&quot;corpcopydt&quot;);
    corpcopydt.appendChild(doc.createTextNode(corpCopydt)); // Formate: &quot;10/04/2022 12:00:00&quot;
    vehicle.appendChild(corpcopydt);

    Element docpath = doc.createElement(&quot;docpath&quot;);
    docpath.appendChild(doc.createTextNode(tiffdestinationPath));
    vehicle.appendChild(docpath);

    Element referencenum = doc.createElement(&quot;referencenum&quot;);
    referencenum.appendChild(doc.createTextNode(referenceNo));
    vehicle.appendChild(referencenum);

    Element dmsdoctype = doc.createElement(&quot;dmsdoctype&quot;);
    dmsdoctype.appendChild(doc.createTextNode(dms_doc_type));
    vehicle.appendChild(dmsdoctype);

    Element formid = doc.createElement(&quot;formid&quot;);
    formid.appendChild(doc.createTextNode(formnum));
    vehicle.appendChild(formid);

    Element versionid = doc.createElement(&quot;versionid&quot;);
    versionid.appendChild(doc.createTextNode(version_id));
    vehicle.appendChild(versionid);

    Element description = doc.createElement(&quot;description&quot;);
    description.appendChild(doc.createTextNode(descript));
    vehicle.appendChild(description);

    Element stocknum = doc.createElement(&quot;stocknum&quot;);
    stocknum.appendChild(doc.createTextNode(StockNo));
    vehicle.appendChild(stocknum);

    Element vin = doc.createElement(&quot;vin&quot;);
    vin.appendChild(doc.createTextNode(vinNo));
    vehicle.appendChild(vin);

    Element paytype = doc.createElement(&quot;paytype&quot;);
    paytype.appendChild(doc.createTextNode(paytypemethod));
    vehicle.appendChild(paytype);

    Element isVaulted = doc.createElement(&quot;isVaulted&quot;);
    isVaulted.appendChild(doc.createTextNode(isVaulte));
    vehicle.appendChild(isVaulted);

    // write the content into xml file
    TransformerFactory transformerFactory = TransformerFactory.newInstance();
    Transformer transformer = transformerFactory.newTransformer();
    DOMSource source = new DOMSource(doc);

    StreamResult result = new StreamResult(new File(xmlfilepartialpath + fineNameConversion + &quot;.xml&quot;));
    transformer.transform(source, result);

    //Copy the file from xml to previous folder
    String copySourcePath = (xmlfilepartialpath + fineNameConversion + &quot;.xml&quot;);
    String copyDestinationPath = (finalDestinationPath + fineNameConversion + &quot;.xml&quot;);

    vars.put(&quot;copySourcePath&quot;, copySourcePath);
    vars.put(&quot;copyDestinationPath&quot;, copyDestinationPath);

    	// Write Order number to the file
	FileWriter fWriter = new FileWriter(csvFileWritePath, true);
	BufferedWriter buff = new BufferedWriter(fWriter);
	buff.write(&quot;\n&quot; + loc_num + &quot;,&quot; + fileWriteYear + &quot;,&quot; + dms_id + &quot;,&quot; + corpCopydt);
	buff.close();
	fWriter.close();
}</stringProp>
            <stringProp name="scriptLanguage">bsh</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler tiff" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">move</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${copySourcePath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${copyDestinationPath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">int iuid = Integer.parseInt(&quot;${__time(mmssSSS)}&quot;) + Integer.parseInt(&quot;${__threadNum}&quot;);
//log.info(&quot;iuid ***:&quot; + iuid);
String suid = Integer.toString(iuid);
log.info(suid);
vars.put(&quot;vuid&quot;,suid);
log.info(&quot;vuid ***:&quot; + vars.get(&quot;vuid&quot;));

FileWriter fWriter = new FileWriter(&quot;D:/Loadtest_Script_Development/EDOCUploadAndTJSDownload/data.csv&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);

buff.write(&quot;9999,&quot;+&quot;2022,&quot;+suid+&quot;\n&quot;);

buff.close();
fWriter.close();
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="tiff-Max" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="tiff-Max" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
import com.create.test.java.io.File;
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="tiff-max" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//***************************
//Config details:
//1. All the path to be updated correctly.
//2. Assign MIN, MEDIAN, MAXIMUM to &quot;tiffFileCreationtype&quot; based on tiff file Creation and size.
//***************************

package com.create.test;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Properties;
import java.util.Random;
import java.util.stream.IntStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.lang.reflect.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;
import java.io.*;  
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;

int maxfileint = 1;.

//Locate current script path
String testPlanFile = GuiPackage.getInstance().getTestPlanFile();
String testPlanFileDir = FilenameUtils.getFullPathNoEndSeparator(testPlanFile);
vars.put(&quot;testPlanFileDir&quot;, testPlanFileDir);

String tiffFileCreationtype =&quot;MAXIMUM&quot;; 	//MIN, MEDIAN, MAXIMUM; i.e., Min file size- &gt;98kb, Median file size &gt;250kb, Max file size- &gt; 590kb

String tiffSampleCompletePath = &quot;\\\\clbflncolq22\\edoc\\2022_test_tiff_edoc_01_&quot;+ tiffFileCreationtype +&quot;.tiff&quot;;  
String tiffdestinationpartial = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\tiff\\&quot;;
String xmlfilepartialpath = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\xml_tiff\\new\\&quot;;
String finalDestinationPath = &quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\xml_tiff\\&quot;;
//String csvFileWritePath	= 	&quot;D:\\Loadtest_Script_Development\\EDOCUploadAndTJSDownload\\qa\\TestData\\Tiff&quot;+ tiffFileCreationtype +&quot;DMSId_Save.csv&quot;;
String csvFileWritePath	= 	testPlanFileDir + &quot;\\TestData\\TiffDMSId_Save.csv&quot;;

File tiffSampleCompletePathFile = new File(tiffSampleCompletePath);

Random random = new Random();

for (int i = 1; i &lt;= maxfileint; i++) {


    //dmsimageid 
	int randomint = random.nextInt(8999)+1000;				//6 digits ramdon number 
    	String dms_id = &quot;99&quot; + randomint.toString();				//For testing purpose appending with 99 for uniqueness identification
	
    //location num  for [ONLY for QA/DEV]
    int randomloc = random.nextInt(19)+9980;				//For testing the store number starts from 9980 to 9999 for QA/DEV
    String loc_num = randomloc.toString();

   //location num for [ONLY for PROD] For production The store number should be 9999
   //String loc_num = &quot;9999&quot;;

    //locstate
    String stateName = &quot;QA&quot;;								//QA, DV, PR

    //referencenum
    int randomref = random.nextInt(8999)+1000;				//6 digits ramdon number -  random.nextInt(899999)+100000; 
    String referenceNo = &quot;99&quot; + randomref.toString();		     //For testing purpose appending with 99 for uniqueness identification
   				

    //Image description
    String imagefiledec = &quot;Performance&quot;;					//Performance

    //Corpcopydate
    Date date = new Date();
    String pattern = &quot;MM/dd/yyyy HH:mm:ss&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
    String corpCopydt = simpleDateFormat.format(date);

    // Year to write in csv file
    String writeYear = &quot;yyyy&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(writeYear);
    String fileWriteYear = simpleDateFormat.format(date);

    //File Name conversion
    String filename = &quot;CLBFLNLDTQ21&quot;;						//ELBFLNLDTQ21				
    String patternformat = &quot;MMddyyyyHHmmss&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(patternformat);
    String corpCopydt1 = simpleDateFormat.format(date);
    int randomsec = random.nextInt(899)+100;
    String milisec = randomsec.toString();
    String fineNameConversion = referenceNo + &quot;-&quot; + loc_num + &quot;-&quot; + corpCopydt1 + milisec + &quot;UTC&quot; + &quot;-&quot; + imagefiledec + &quot;-&quot; + filename;
    log.info(&quot;FineNameConversion: &quot; + fineNameConversion);

    //dms doc type
    String dms_doc_type = &quot;2&quot;;

    //form id
    int randomformid = random.nextInt(8999999) + 1000000;
    String formnum = randomformid.toString();

    //Version id
    int randomver = random.nextInt(8)+1;
    String version_id = randomver.toString();

    //Description
    String descript = &quot;Performance-Test-CLBFLNLDTQ21&quot;;				//Performance-Test-ELBFLNLDTQ21
    
    //Vin No
    String vinNo = &quot;1GCCS1442W8181753&quot;;							//1GCCS1442W8181753

    //Stock number
    int randomstck = random.nextInt(89999999) + 10000000;
    String StockNo = randomstck.toString();

    //Pay type method
    String paytypemethod = &quot;CAF&quot;;

    //isVaulted
    String isVaulte = &quot;TRUE&quot;;

    String tiffdestinationPath = tiffdestinationpartial + fineNameConversion + &quot;.tiff&quot;;

    //System.out.println(&quot;file copy&quot;);
    log.info(tiffdestinationPath);

    InputStream inStream = null;
    OutputStream outStream = null;

    File inputFile = new File(tiffSampleCompletePath);
    File outputFile = new File(tiffdestinationPath);

    inStream = new FileInputStream(inputFile);
    outStream = new FileOutputStream(outputFile);

    byte[] buffer = new byte[1024];


    int fileLength;
    while ((fileLength = inStream.read(buffer)) &gt; 0) {
        outStream.write(buffer, 0, fileLength);
    }

    inStream.close();
    outStream.close();

    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
    Document doc = dBuilder.newDocument();

    // root vehicles element
    Element rootElement = doc.createElement(&quot;vehicles&quot;);
    doc.appendChild(rootElement);

    // vehicle element
    Element vehicle = doc.createElement(&quot;vehicle&quot;);
    rootElement.appendChild(vehicle);

    // element
    Element dmsimageid = doc.createElement(&quot;dmsimageid&quot;);
    dmsimageid.appendChild(doc.createTextNode(dms_id));
    vehicle.appendChild(dmsimageid);

    Element locnum = doc.createElement(&quot;locnum&quot;);
    locnum.appendChild(doc.createTextNode(loc_num));
    vehicle.appendChild(locnum);

    Element locstate = doc.createElement(&quot;locstate&quot;);
    locstate.appendChild(doc.createTextNode(stateName));
    vehicle.appendChild(locstate);

    Element imagefilename = doc.createElement(&quot;imagefilename&quot;);
    imagefilename.appendChild(doc.createTextNode(imagefiledec));
    vehicle.appendChild(imagefilename);

    Element corpcopydt = doc.createElement(&quot;corpcopydt&quot;);
    corpcopydt.appendChild(doc.createTextNode(corpCopydt)); // Formate: &quot;10/04/2022 12:00:00&quot;
    vehicle.appendChild(corpcopydt);

    Element docpath = doc.createElement(&quot;docpath&quot;);
    docpath.appendChild(doc.createTextNode(tiffdestinationPath));
    vehicle.appendChild(docpath);

    Element referencenum = doc.createElement(&quot;referencenum&quot;);
    referencenum.appendChild(doc.createTextNode(referenceNo));
    vehicle.appendChild(referencenum);

    Element dmsdoctype = doc.createElement(&quot;dmsdoctype&quot;);
    dmsdoctype.appendChild(doc.createTextNode(dms_doc_type));
    vehicle.appendChild(dmsdoctype);

    Element formid = doc.createElement(&quot;formid&quot;);
    formid.appendChild(doc.createTextNode(formnum));
    vehicle.appendChild(formid);

    Element versionid = doc.createElement(&quot;versionid&quot;);
    versionid.appendChild(doc.createTextNode(version_id));
    vehicle.appendChild(versionid);

    Element description = doc.createElement(&quot;description&quot;);
    description.appendChild(doc.createTextNode(descript));
    vehicle.appendChild(description);

    Element stocknum = doc.createElement(&quot;stocknum&quot;);
    stocknum.appendChild(doc.createTextNode(StockNo));
    vehicle.appendChild(stocknum);

    Element vin = doc.createElement(&quot;vin&quot;);
    vin.appendChild(doc.createTextNode(vinNo));
    vehicle.appendChild(vin);

    Element paytype = doc.createElement(&quot;paytype&quot;);
    paytype.appendChild(doc.createTextNode(paytypemethod));
    vehicle.appendChild(paytype);

    Element isVaulted = doc.createElement(&quot;isVaulted&quot;);
    isVaulted.appendChild(doc.createTextNode(isVaulte));
    vehicle.appendChild(isVaulted);

    // write the content into xml file
    TransformerFactory transformerFactory = TransformerFactory.newInstance();
    Transformer transformer = transformerFactory.newTransformer();
    DOMSource source = new DOMSource(doc);

    StreamResult result = new StreamResult(new File(xmlfilepartialpath + fineNameConversion + &quot;.xml&quot;));
    transformer.transform(source, result);

    //Copy the file from xml to previous folder
    String copySourcePath = (xmlfilepartialpath + fineNameConversion + &quot;.xml&quot;);
    String copyDestinationPath = (finalDestinationPath + fineNameConversion + &quot;.xml&quot;);

    vars.put(&quot;copySourcePath&quot;, copySourcePath);
    vars.put(&quot;copyDestinationPath&quot;, copyDestinationPath);

    	// Write Order number to the file
	FileWriter fWriter = new FileWriter(csvFileWritePath, true);
	BufferedWriter buff = new BufferedWriter(fWriter);
	buff.write(&quot;\n&quot; + loc_num + &quot;,&quot; + fileWriteYear + &quot;,&quot; + dms_id + &quot;,&quot; + corpCopydt);
	buff.close();
	fWriter.close();
}</stringProp>
            <stringProp name="scriptLanguage">bsh</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler tiff" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">move</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${copySourcePath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${copyDestinationPath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DownloadService(Sales+eDoc)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">300</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TJS Download-Run" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;Envelope xmlns=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
    &lt;Body&gt;&#xd;
        &lt;ImageRequest xmlns=&quot;http://filenet.carmax.org/services/transactionjacket&quot;&gt;&#xd;
            &lt;imageRequest&gt;&#xd;
                &lt;locNum&gt;${Loc_num}&lt;/locNum&gt;&#xd;
                &lt;dmsImageId&gt;${dms_image_id}&lt;/dmsImageId&gt;&#xd;
                &lt;corpCopyYear&gt;${year}&lt;/corpCopyYear&gt;&#xd;
                 &lt;operation&gt;100&lt;/operation&gt;&#xd;
                &lt;userName&gt;9503277&lt;/userName&gt;  &#xd;
                &lt;password&gt;sM@909xa&lt;/password&gt;&#xd;
            &lt;/imageRequest&gt;&#xd;
        &lt;/ImageRequest&gt;&#xd;
    &lt;/Body&gt;&#xd;
&lt;/Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">filenetqa.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/TransactionJacketService/ws/TransactionJacket.wsdl</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://filenet.carmax.org/services/transactionjacket&quot;</stringProp>
              </elementProp>
              <elementProp name="&apos;Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
              <elementProp name="Cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">LtpaToken2=14WmQTvCZbgg0Mu8IVd6wbHTPfzC2XqLQkI42y4FsxEMCZFw+8TVaOHW3MeKlubXXF7dily14NwTOLTGjcpmiL9T7+AuoKhmDqRk1fmu3wAXEZsA5t4/yv/xoBAR5XENoUZFPJCaEbkEN1MI0FuBhYt6AvUakqM7p+kRDJBelrKpp3OdTqLl7/X+AHTMFpyXxglmf7+9ykXHZJEx/bYAh3L0v0YSw5AI8Sz62cw/FjlGmSq+OtlRGY5D4OYdv1I1nHqpGkKOFKFs+B3LRf8uwwY7OaaHDcK/9a9r0GYMJ6La3gRSpTusda897rKaz+WpKTAPIgf67iiA8NnXVeaQkrf9YddPdMHLXMVKd3rCtMeSGS3+b9Vs714JhAde2Che7j28v4ZIEmW3OlYzqe5Kah2dzADzW8NAllYbqDtyCzbyHdl/dO3RvR5qmxLtn4GefUq3FM0F+R5F48T/fEsrywX2kQ8UTFkxbwQRTFuNT4FbN3YlPGE1rkiKmyHQ5uav0jI3kknhQhEznV+Tz971IUfvcfD4bWwCa+xBfwkXgjigUEK8ubIJ/r78OvXc0Ahgs6G4fJ7EWzTGcROPPlSvQbhSQM2r04iXOxramqAEmP4+IiQbLGBgVaET7RNezyG2dUNLOB9MySpn9oVojvIjqz0iAqhSCZ+tq/vwmlHNLlM9LYyYVtjNEzNPenZX/HAz/GkqXiGmwLRaS5V8amRgxdL8LC6cVXbcIZGUOHaK/wNVwTnUNI4QsPjl/FVKnPNz</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">./TestData/data_07_Oct.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">Loc_num,year,dms_image_id,createddate</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="46041891">.tiff</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Verify content in response</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API-All-Services-eDoc" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">300</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">Counter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller -Tiff-Min" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Tiff-Min_Upload" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="D:\Loadtest\API\OrderImages\123456-9999-TEST1_MIN.tiff" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Loadtest\API\OrderImages\123456-9999-TEST1_MIN.tiff</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/tiff</stringProp>
                  </elementProp>
                  <elementProp name="D:\Loadtest\API\Testfile_Static.JSON" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Loadtest\API\Testfile_Static.JSON</stringProp>
                    <stringProp name="File.paramname">jsonFileDetail</stringProp>
                    <stringProp name="File.mimetype">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ID</stringProp>
                <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;(.+?)\&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=--------------------------679987539470913468950950</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TIFF_Metadata_Download_Min" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=true&amp;data=false</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="&apos;Authorization&apos;" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="false">
                <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
                <stringProp name="SizeAssertion.size">88000</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\API\In_Progress_Script\tifftest\tiff_Min_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">TIFF_Test_Download</stringProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="TIFF_Update_Min" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TIFF_Update_Min" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
   &#xd;
    &quot;filemetadata&quot;: {&#xd;
        &#xd;
      &quot;fileName&quot;: &quot;updatetest&quot;,&#xd;
        &quot;stockNumber&quot;: &quot;123456&quot;,&#xd;
        &quot;orderNumber&quot;: &quot;12345&quot;&#xd;
        &#xd;
    }&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="&apos;Authorization&apos;" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\API\In_Progress_Script\tifftest\updatetest</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">TIFF_Test_Download</stringProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TIFF_Download_Min" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=false&amp;data=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="&apos;Authorization&apos;" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="false">
                <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
                <stringProp name="SizeAssertion.size">88000</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\API\In_Progress_Script\tifftest\tiff_Min_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">TIFF_Test_Download</stringProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
              <stringProp name="BeanShellSampler.query">log.info(&quot;ID****&quot; + vars.get(&quot;ID&quot;));
sID=&quot;${ID}&quot;;


//props.get(&quot;mylist&quot;).add(${Counter});
//log.info(&quot;mylist&quot; + props.get(&quot;mylist&quot;).toString());

props.get(&quot;mylist&quot;).add(sID);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">log.info(&quot;ID****&quot; + vars.get(&quot;ID&quot;));
sID=&quot;${ID}&quot;;


//props.get(&quot;mylist&quot;).add(${Counter});
//log.info(&quot;mylist&quot; + props.get(&quot;mylist&quot;).toString());

props.get(&quot;mylist&quot;).add(sID);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller tiff-Median" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">7</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Tiff-Median_Upload" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="D:\Loadtest\API\OrderImages\123456-9999-TEST1_MEDIAN.tiff" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Loadtest\API\OrderImages\123456-9999-TEST1_MEDIAN.tiff</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/tiff</stringProp>
                  </elementProp>
                  <elementProp name="D:\Loadtest\API\Testfile_Static.JSON" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Loadtest\API\Testfile_Static.JSON</stringProp>
                    <stringProp name="File.paramname">jsonFileDetail</stringProp>
                    <stringProp name="File.mimetype">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ID</stringProp>
                <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;(.+?)\&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=--------------------------544653586813994706399515</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TIFF_Metadata_Download_Median" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=true&amp;data=false</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="&apos;Authorization&apos;" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="false">
                <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
                <stringProp name="SizeAssertion.size">88000</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\API\In_Progress_Script\tifftest\tiff_Min_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">TIFF_Test_Download</stringProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="TIFF_Update_Median" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TIFF_Update_Median" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
   &#xd;
    &quot;filemetadata&quot;: {&#xd;
        &#xd;
      &quot;fileName&quot;: &quot;updatetest&quot;,&#xd;
        &quot;stockNumber&quot;: &quot;123456&quot;,&#xd;
        &quot;orderNumber&quot;: &quot;12345&quot;&#xd;
        &#xd;
    }&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="&apos;Authorization&apos;" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\API\In_Progress_Script\tifftest\updatetest</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">TIFF_Test_Download</stringProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TIFF_Download_Median" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=false&amp;data=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="&apos;Authorization&apos;" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="false">
                <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
                <stringProp name="SizeAssertion.size">88000</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\API\In_Progress_Script\tifftest\tiff_Min_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">TIFF_Test_Download</stringProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
              <stringProp name="BeanShellSampler.query">log.info(&quot;ID****&quot; + vars.get(&quot;ID&quot;));
sID=&quot;${ID}&quot;;


//props.get(&quot;mylist&quot;).add(${Counter});
//log.info(&quot;mylist&quot; + props.get(&quot;mylist&quot;).toString());

props.get(&quot;mylist&quot;).add(sID);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">log.info(&quot;ID****&quot; + vars.get(&quot;ID&quot;));
sID=&quot;${ID}&quot;;


//props.get(&quot;mylist&quot;).add(${Counter});
//log.info(&quot;mylist&quot; + props.get(&quot;mylist&quot;).toString());

props.get(&quot;mylist&quot;).add(sID);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller tiff-MAX" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Tiff-Max_Upload" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="D:\Loadtest\API\OrderImages\123456-9999-TEST1_MAX.tiff" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Loadtest\API\OrderImages\123456-9999-TEST1_MAX.tiff</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/tiff</stringProp>
                  </elementProp>
                  <elementProp name="D:\Loadtest\API\Testfile_Static.JSON" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Loadtest\API\Testfile_Static.JSON</stringProp>
                    <stringProp name="File.paramname">jsonFileDetail</stringProp>
                    <stringProp name="File.mimetype">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ID</stringProp>
                <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;(.+?)\&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=--------------------------544653586813994706399515</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TIFF_Metadata_Download_Max" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=true&amp;data=false</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="&apos;Authorization&apos;" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="false">
                <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
                <stringProp name="SizeAssertion.size">88000</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\API\In_Progress_Script\tifftest\tiff_Min_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">TIFF_Test_Download</stringProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TIFF_Download_Max" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=false&amp;data=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="&apos;Authorization&apos;" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="false">
                <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
                <stringProp name="SizeAssertion.size">88000</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\API\In_Progress_Script\tifftest\tiff_Min_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">TIFF_Test_Download</stringProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="TIFF_Update_Max" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TIFF_Update_Max" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
   &#xd;
    &quot;filemetadata&quot;: {&#xd;
        &#xd;
      &quot;fileName&quot;: &quot;updatetest&quot;,&#xd;
        &quot;stockNumber&quot;: &quot;123456&quot;,&#xd;
        &quot;orderNumber&quot;: &quot;12345&quot;&#xd;
        &#xd;
    }&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="&apos;Authorization&apos;" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\API\In_Progress_Script\tifftest\updatetest</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">TIFF_Test_Download</stringProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
              <stringProp name="BeanShellSampler.query">log.info(&quot;ID****&quot; + vars.get(&quot;ID&quot;));
sID=&quot;${ID}&quot;;


//props.get(&quot;mylist&quot;).add(${Counter});
//log.info(&quot;mylist&quot; + props.get(&quot;mylist&quot;).toString());

props.get(&quot;mylist&quot;).add(sID);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">log.info(&quot;ID****&quot; + vars.get(&quot;ID&quot;));
sID=&quot;${ID}&quot;;


//props.get(&quot;mylist&quot;).add(${Counter});
//log.info(&quot;mylist&quot; + props.get(&quot;mylist&quot;).toString());

props.get(&quot;mylist&quot;).add(sID);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller-PDF" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API -PDF Upload" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="D:\Loadtest\API\OrderImages\123456-9999-TEST1_AGREEMNT_AVG.pdf" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Loadtest\API\OrderImages\123456-9999-TEST1_AGREEMNT_AVG.pdf</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">image/pdf</stringProp>
                  </elementProp>
                  <elementProp name="D:\Loadtest\API\Testfile_Static_pdf.JSON" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Loadtest\API\Testfile_Static_pdf.JSON</stringProp>
                    <stringProp name="File.paramname">jsonFileDetail</stringProp>
                    <stringProp name="File.mimetype">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ID</stringProp>
                <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;(.+?)\&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=--------------------------536408728066747719619161</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDF_Metadata_Download" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=true&amp;data=false</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="&apos;Authorization&apos;" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="false">
                <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
                <stringProp name="SizeAssertion.size">88000</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\EDOCUploadAndTJSDownload\qa\PDFFiles\DownloadFiles\pdf_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">Test_Download</stringProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">3000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="PDF_Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDF_Update" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{&#xd;
   &#xd;
    &quot;filemetadata&quot;: {&#xd;
        &#xd;
      &quot;fileName&quot;: &quot;updatetest&quot;,&#xd;
        &quot;stockNumber&quot;: &quot;678930&quot;,&#xd;
        &quot;orderNumber&quot;: &quot;980760&quot;&#xd;
        &#xd;
    }&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="&apos;Authorization&apos;" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\EDOCUploadAndTJSDownload\qa\PDFFiles\Updatefiles\pdf_</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">true</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">Test_Update</stringProp>
                  <boolProp name="FileSaver.addTimstamp">true</boolProp>
                </ResultSaver>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PDF_Download" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=false&amp;data=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="&apos;Authorization&apos;" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="false">
                <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
                <stringProp name="SizeAssertion.size">88000</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
              </SizeAssertion>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">D:\Loadtest_Script_Development\EDOCUploadAndTJSDownload\qa\PDFFiles\UpdateDownloadFiles\pdf_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">Test_UpdateDownload</stringProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;ID****&quot; + vars.get(&quot;ID&quot;));
sID=&quot;${ID}&quot;;


//props.get(&quot;mylist&quot;).add(${Counter});
//log.info(&quot;mylist&quot; + props.get(&quot;mylist&quot;).toString());


//FileWriter fWriter = new FileWriter(&quot;D:/Loadtest_Script_Development/EDOCUploadAndTJSDownload/qa/PDFFiles/BuysID.csv&quot;, true);
//BufferedWriter buff = new BufferedWriter(fWriter);
//
//buff.write(sID+&quot;\n&quot;);
//buff.close();
//fWriter.close();

//props.get(&quot;mylist&quot;).add(sID);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">log.info(&quot;ID****&quot; + vars.get(&quot;ID&quot;));
sID=&quot;${ID}&quot;;


//props.get(&quot;mylist&quot;).add(${Counter});
//log.info(&quot;mylist&quot; + props.get(&quot;mylist&quot;).toString());

props.get(&quot;mylist&quot;).add(sID);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller Search" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StockNum" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;info&quot;: {&#xd;
    &quot;origin&quot;: &quot;edocs&quot;,&#xd;
    &quot;category&quot;: [&#xd;
      &quot;form&quot;,&#xd;
      &quot;agreement&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;search&quot;: {&#xd;
    &quot;and&quot;: [&#xd;
      {&#xd;
        &quot;eq&quot;: [&#xd;
          &quot;stockNumber&quot;,&#xd;
          &quot;${Stock_Number}&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;gt&quot;: [&#xd;
          &quot;corporateCopyDate&quot;,&#xd;
          &quot;2019-01-01T14:30:31.505Z&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;gt&quot;: [&#xd;
          &quot;corporateCopyDate&quot;,&#xd;
          &quot;2022-01-01T14:30:31.505Z&quot;&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;page&quot;: {&#xd;
    &quot;pageIndex&quot;: 0,&#xd;
    &quot;pageSize&quot;: 10&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/information</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VIN" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;info&quot;: {&#xd;
    &quot;origin&quot;: &quot;edocs&quot;,&#xd;
    &quot;category&quot;: [&#xd;
      &quot;form&quot;,&#xd;
      &quot;agreement&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;search&quot;: {&#xd;
    &quot;and&quot;: [&#xd;
      {&#xd;
        &quot;eq&quot;: [&#xd;
          &quot;vehicleIdentificationNumber&quot;,&#xd;
          &quot;${Vin_Number}&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;gt&quot;: [&#xd;
          &quot;corporateCopyDate&quot;,&#xd;
          &quot;2022-01-01T14:30:31.505Z&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;gt&quot;: [&#xd;
          &quot;corporateCopyDate&quot;,&#xd;
          &quot;2022-12-30T14:30:31.505Z&quot;&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;page&quot;: {&#xd;
    &quot;pageIndex&quot;: 0,&#xd;
    &quot;pageSize&quot;: 10&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/information</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderNumAndLocNum" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;info&quot;: {&#xd;
    &quot;origin&quot;: &quot;edocs&quot;,&#xd;
    &quot;category&quot;: [&#xd;
      &quot;form&quot;,&#xd;
      &quot;agreement&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;search&quot;: {&#xd;
    &quot;and&quot;: [&#xd;
      {&#xd;
        &quot;eq&quot;: [&#xd;
          &quot;orderNumber&quot;,&#xd;
          &quot;${Order_Number}&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;eq&quot;: [&#xd;
          &quot;storeNumber&quot;,&#xd;
           &quot;${Order_Location_Number}&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
       &quot;gt&quot;: [&#xd;
          &quot;corporateCopyDate&quot;,&#xd;
          &quot;2022-01-01T14:30:31.505Z&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;lt&quot;: [&#xd;
          &quot;corporateCopyDate&quot;,&#xd;
          &quot;2022-12-30T14:30:31.505Z&quot;&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;page&quot;: {&#xd;
    &quot;pageIndex&quot;: 0,&#xd;
    &quot;pageSize&quot;: 10&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/information</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DMSImageIDAndLocNum" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;info&quot;: {&#xd;
    &quot;origin&quot;: &quot;edocs&quot;,&#xd;
    &quot;category&quot;: [&#xd;
      &quot;form&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;search&quot;: {&#xd;
    &quot;and&quot;: [&#xd;
      {&#xd;
        &quot;eq&quot;: [&#xd;
          &quot;dmsImageId&quot;,&#xd;
          &quot;${DmsImage_Id}&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;eq&quot;: [&#xd;
          &quot;storeNumber&quot;,&#xd;
           &quot;${DMS_Location_Number}&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
       &quot;gt&quot;: [&#xd;
          &quot;corporateCopyDate&quot;,&#xd;
          &quot;2022-01-01T14:30:31.505Z&quot;&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;lt&quot;: [&#xd;
          &quot;corporateCopyDate&quot;,&#xd;
          &quot;2022-12-30T14:30:31.505Z&quot;&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;page&quot;: {&#xd;
    &quot;pageIndex&quot;: 0,&#xd;
    &quot;pageSize&quot;: 10&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/information</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49592">206</stringProp>
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
            </ResponseAssertion>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">D:/Loadtest_Script_Development/API/In_Progress_Script/ComplexSearch/DateForComplex_withformula_Aug1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">startDate,oneday,threeday,oneweek,onemonth,sixmonth,oneyear,Vin_Number,Stock_Number,Order_Number,Order_Location_Number,DmsImage_Id,DMS_Location_Number</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DMSImageID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;info&quot;: {&#xd;
&quot;origin&quot;: &quot;edocs&quot;,&#xd;
&quot;category&quot;: [&#xd;
&quot;form&quot;&#xd;
],&#xd;
&quot;startTime&quot;: &quot;2019-01-01T14:30:31.505Z&quot;,&#xd;
&quot;endTime&quot;: &quot;2021-12-31T14:30:31.505Z&quot;&#xd;
},&#xd;
&quot;searchKeys&quot;: {&#xd;
&quot;dmsImageId&quot;: [&quot;${Dms_Image_ID}&quot;]&#xd;
},&#xd;
&quot;page&quot;: {&#xd;
&quot;pageIndex&quot;: ${pageindex},&#xd;
&quot;pageSize&quot;: 20&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/information</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderNumber_LocationNumber_And_ImageSource" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;info&quot;: {&#xd;
&quot;origin&quot;: &quot;edocs&quot;,&#xd;
&quot;category&quot;: [&#xd;
&quot;form&quot;&#xd;
],&#xd;
&quot;startTime&quot;: &quot;2019-01-01T14:30:31.505Z&quot;,&#xd;
&quot;endTime&quot;: &quot;2021-12-31T14:30:31.505Z&quot;&#xd;
},&#xd;
&quot;searchKeys&quot;: {&#xd;
&quot;orderNumber&quot;: [&quot;${Order_Num}&quot;],&quot;locationNumber&quot;: [&quot;${Loc_Num}&quot;],&quot;imageSource&quot;: &quot;EDocs&quot;&#xd;
},&#xd;
&quot;page&quot;: {&#xd;
&quot;pageIndex&quot;: ${pageindex},&#xd;
&quot;pageSize&quot;: 20&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/information</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderNumber_And_LocationNumber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;info&quot;: {&#xd;
&quot;origin&quot;: &quot;edocs&quot;,&#xd;
&quot;category&quot;: [&#xd;
&quot;form&quot;&#xd;
],&#xd;
&quot;startTime&quot;: &quot;2019-01-01T14:30:31.505Z&quot;,&#xd;
&quot;endTime&quot;: &quot;2021-12-31T14:30:31.505Z&quot;&#xd;
},&#xd;
&quot;searchKeys&quot;: {&#xd;
&quot;orderNumber&quot;: [&quot;${Order_Num}&quot;],&quot;locationNumber&quot;: [&quot;${Loc_Num}&quot;]&#xd;
},&#xd;
&quot;page&quot;: {&#xd;
&quot;pageIndex&quot;: ${pageindex},&#xd;
&quot;pageSize&quot;: 20&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/information</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VIN" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;info&quot;: {&#xd;
&quot;origin&quot;: &quot;edocs&quot;,&#xd;
&quot;category&quot;: [&#xd;
&quot;form&quot;&#xd;
],&#xd;
&quot;startTime&quot;: &quot;2019-01-01T14:30:31.505Z&quot;,&#xd;
&quot;endTime&quot;: &quot;2021-12-31T14:30:31.505Z&quot;&#xd;
},&#xd;
&quot;searchKeys&quot;: {&#xd;
&quot;vehicleIdentificationNumber&quot;: [&quot;${VIN}&quot;]&#xd;
},&#xd;
&quot;page&quot;: {&#xd;
&quot;pageIndex&quot;: ${pageindex},&#xd;
&quot;pageSize&quot;: 20&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/information</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StockNumber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;info&quot;: {&#xd;
&quot;origin&quot;: &quot;edocs&quot;,&#xd;
&quot;category&quot;: [&#xd;
&quot;form&quot;&#xd;
],&#xd;
&quot;startTime&quot;: &quot;2019-01-01T14:30:31.505Z&quot;,&#xd;
&quot;endTime&quot;: &quot;2021-12-31T14:30:31.505Z&quot;&#xd;
},&#xd;
&quot;searchKeys&quot;: {&#xd;
&quot;stockNumber&quot;: [&quot;${Stock_Num}&quot;]&#xd;
},&#xd;
&quot;page&quot;: {&#xd;
&quot;pageIndex&quot;: ${pageindex},&#xd;
&quot;pageSize&quot;: 20&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/information</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Corpcopydate and Location number" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;info&quot;: {&#xd;
&quot;origin&quot;: &quot;edocs&quot;,&#xd;
&quot;category&quot;: [&#xd;
&quot;form&quot;&#xd;
],&#xd;
&quot;startTime&quot;: &quot;2019-01-01T14:30:31.505Z&quot;,&#xd;
&quot;endTime&quot;: &quot;2021-12-31T14:30:31.505Z&quot;&#xd;
},&#xd;
&quot;searchKeys&quot;: {&#xd;
 &quot;corporateCopyDate&quot;: &quot;2019-04-02T16:35:44.000Z&quot;,&quot;locationNumber&quot;: [&quot;${Loc_Num}&quot;]&#xd;
},&#xd;
&quot;page&quot;: {&#xd;
&quot;pageIndex&quot;: ${pageindex},&#xd;
&quot;pageSize&quot;: 20&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ecmapi/v1/information</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
                <stringProp name="49592">206</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">D:/Loadtest_Script_Development/API/In_Progress_Script/search_Service.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">Dms_Image_ID,Order_Num,Stock_Num,Loc_Num,VIN,pageindex</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">log.info(&quot;ID****&quot; + vars.get(&quot;ID&quot;));
sID=&quot;${ID}&quot;;


//props.get(&quot;mylist&quot;).add(${Counter});
//log.info(&quot;mylist&quot; + props.get(&quot;mylist&quot;).toString());

props.get(&quot;mylist&quot;).add(sID);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">currentdate=&quot;${__dateTimeConvert(${__time()},,MM/dd/yyyy HH:mm:ss)}&quot;;
vars.put(&quot;currentdate&quot;,currentdate)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>

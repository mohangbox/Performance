<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API-ServiceJacket-TIFF-QA" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">300</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-ServiceJacket-TIFF-Upload-QA" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${testPlanFileDir}\TestData\ServiceJacket_Test.tiff" elementType="HTTPFileArg">
                <stringProp name="File.path">${testPlanFileDir}\TestData\ServiceJacket_Test.tiff</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">image/tiff</stringProp>
              </elementProp>
              <elementProp name="${testPlanFileDir}\TestData\ServiceJacket_Test_tiff.json" elementType="HTTPFileArg">
                <stringProp name="File.path">${testPlanFileDir}\TestData\ServiceJacket_Test_tiff.json</stringProp>
                <stringProp name="File.paramname">jsonFileDetail</stringProp>
                <stringProp name="File.mimetype">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">./Input/ServiceJacket_TIFF_Input.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">fileName,dmsImageId,storeNumber,orderNumber,stockNumber,scanStatus,vehicleIdentificationNumber,originFileCreationTS, originFileRequestTS</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JsonFileGenerator" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
package com.create.test;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Properties;
import java.util.Random;
import java.util.stream.IntStream;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.lang.reflect.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.FileUtils;

int maxfileint = 1;
int jsonFileName = 0;

Random random = new Random();


//Locate current script path
String testPlanFile = GuiPackage.getInstance().getTestPlanFile();
String testPlanFileDir = FilenameUtils.getFullPathNoEndSeparator(testPlanFile);
vars.put(&quot;testPlanFileDir&quot;, testPlanFileDir);

//Source &amp; Destination folder with file
String filepath = testPlanFileDir + &quot;/TestData/ServiceJacket_Test_tiff.json&quot;;

//Delete the existing json files in the current folder:
//List files = FileUtils.listFiles(new File(testPlanFileDir + &quot;/TestData/ServiceJacket_Test_tiff&quot;), new String[] {&quot;json&quot;}, true);
//for (File file: files) {
//    file.delete();
//}

File file1 = new File(filepath);
if (file1.exists()) {
file1.delete(); 
}


for (int i = 1; i &lt;= maxfileint; i++) {

    Date date = new Date();
    String patternformat1 = &quot;yyyy-MM-dd&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(patternformat1);
    String Copydt1 = simpleDateFormat.format(date);

    String patternformat2 = &quot;HH:mm:ss.&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(patternformat2);
    String Copydt2 = simpleDateFormat.format(date);

    int randomsec = random.nextInt(899) + 100;
    String milisec = randomsec.toString();
    String timeStampConv = Copydt1 + &quot;T&quot; + Copydt2 + milisec + &quot;Z&quot;;   

    String Str1 = &quot;{&quot;;
    String Str2 = &quot;    \&quot;info\&quot;: {&quot;;
    String Str3 = &quot;        \&quot;origin\&quot;: \&quot;serviceoperations\&quot;,&quot;;
    String Str4 = &quot;        \&quot;mimeType\&quot;&quot; + &quot;: &quot; + &quot;\&quot;tiff\&quot;&quot; + &quot;,&quot;;
    String Str5 = &quot;        \&quot;category\&quot;&quot; + &quot;: &quot; + &quot;\&quot;servicejacket\&quot;&quot; + &quot;,&quot;;
    String Str6 = &quot;        \&quot;originFileCreationTS\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${originFileCreationTS}&quot; + &quot;T&quot; + Copydt2 + milisec + &quot;Z&quot; + &quot;\&quot;,&quot;;
    String Str7 = &quot;        \&quot;originFileRequestTS\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${originFileRequestTS}&quot; + &quot;T&quot; + Copydt2 + milisec + &quot;Z&quot; + &quot;\&quot;&quot;;
    String Str8 = &quot;    },&quot;;
    String Str9 = &quot;    \&quot;filemetadata\&quot;: {&quot;;
    String Str10 = &quot;        \&quot;fileName\&quot;: \&quot;&quot; + &quot;${fileName}&quot; +&quot;\&quot;&quot;+&quot;,&quot;;
    String Str11 = &quot;        \&quot;dmsImageId\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${dmsImageId}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str12 = &quot;        \&quot;storeNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${storeNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str13 = &quot;        \&quot;orderNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${orderNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str14 = &quot;        \&quot;stockNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${stockNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str15 = &quot;        \&quot;scanStatus\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${scanStatus}&quot; +&quot;\&quot;&quot; + &quot;,&quot;;
    String Str16 = &quot;        \&quot;vehicleIdentificationNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${vehicleIdentificationNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str17 = &quot;        \&quot;corporateCopyDate\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + timeStampConv + &quot;\&quot;&quot; ;
    String Str18 = &quot;    }&quot;;
    String Str19 = &quot;}&quot;;


    //Write Order number to the file
    FileWriter fWriter = new FileWriter(filepath, true);
    BufferedWriter buff = new BufferedWriter(fWriter);
    buff.write(Str1 + &quot;\n&quot; + Str2 + &quot;\n&quot; + Str3 + &quot;\n&quot; + Str4 + &quot;\n&quot; + Str5 + &quot;\n&quot; + Str6 + &quot;\n&quot; + Str7 + &quot;\n&quot; + Str8 + &quot;\n&quot; +
        Str9 + &quot;\n&quot; + Str10 + &quot;\n&quot; + Str11 + &quot;\n&quot; + Str12 + &quot;\n&quot; + Str13 + &quot;\n&quot; + Str14 + &quot;\n&quot; + Str15 + &quot;\n&quot; + Str16 + &quot;\n&quot; +
        Str17 + &quot;\n&quot; + Str18 + &quot;\n&quot; + Str19);
    buff.close();
    fWriter.close();
}</stringProp>
            <stringProp name="scriptLanguage">bsh</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ID</stringProp>
            <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;(.+?)\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-ServiceJacket-TIFF-MetaDataDownload-QA" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=true&amp;data=false</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="&apos;Authorization&apos;" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${testPlanFileDir}\Response\metadata\ServiceOp1_tiff_metadata_</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <stringProp name="FileSaver.variablename">Tiff_metadata</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-ServiceJacket-TIFF-Update-QA" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;filemetadata&quot;: {&#xd;
        &quot;fileName&quot;: &quot;update_${fileName}&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="&apos;Authorization&apos;" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${testPlanFileDir}\Response\update\ServiceOp1_tiff_update_</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <stringProp name="FileSaver.variablename">tiff_update</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-ServiceJacket-TIFF-Download-QA" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=false&amp;data=true</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="&apos;Authorization&apos;" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${testPlanFileDir}\Response\download\ServiceOp1_tiff_download_</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <stringProp name="FileSaver.variablename">tiff_download</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API-APServiceJacket-TIFF-QA" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">300</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-APServiceJacket-TIFF-Upload-QA" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${testPlanFileDir}\TestData\APServiceJacket_Test.tiff" elementType="HTTPFileArg">
                <stringProp name="File.path">${testPlanFileDir}\TestData\APServiceJacket_Test.tiff</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">image/tiff</stringProp>
              </elementProp>
              <elementProp name="${testPlanFileDir}\TestData\APServiceJacket_Test_tiff.json" elementType="HTTPFileArg">
                <stringProp name="File.path">${testPlanFileDir}\TestData\APServiceJacket_Test_tiff.json</stringProp>
                <stringProp name="File.paramname">jsonFileDetail</stringProp>
                <stringProp name="File.mimetype">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">./Input/APServiceJacket_TIFF_Input.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">fileName,dmsImageId,storeNumber,orderNumber,poNumber,scanStatus,vehicleIdentificationNumber,originFileCreationTS, originFileRequestTS</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JsonFileGenerator" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
package com.create.test;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Properties;
import java.util.Random;
import java.util.stream.IntStream;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.lang.reflect.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.FileUtils;

int maxfileint = 1;
int jsonFileName = 0;

Random random = new Random();


//Locate current script path
String testPlanFile = GuiPackage.getInstance().getTestPlanFile();
String testPlanFileDir = FilenameUtils.getFullPathNoEndSeparator(testPlanFile);
vars.put(&quot;testPlanFileDir&quot;, testPlanFileDir);

//Source &amp; Destination folder with file
String filepath = testPlanFileDir + &quot;/TestData/APServiceJacket_Test_tiff.json&quot;;

//Delete the existing json files in the current folder:
//List files = FileUtils.listFiles(new File(testPlanFileDir + &quot;/TestData/ServiceJacket_Test_tiff&quot;), new String[] {&quot;json&quot;}, true);
//for (File file: files) {
//    file.delete();
//}

File file1 = new File(filepath);
if (file1.exists()) {
file1.delete(); 
}


for (int i = 1; i &lt;= maxfileint; i++) {

    Date date = new Date();
    String patternformat1 = &quot;yyyy-MM-dd&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(patternformat1);
    String Copydt1 = simpleDateFormat.format(date);

    String patternformat2 = &quot;HH:mm:ss.&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(patternformat2);
    String Copydt2 = simpleDateFormat.format(date);

    int randomsec = random.nextInt(899) + 100;
    String milisec = randomsec.toString();
    String timeStampConv = Copydt1 + &quot;T&quot; + Copydt2 + milisec + &quot;Z&quot;;   

    String Str1 = &quot;{&quot;;
    String Str2 = &quot;    \&quot;info\&quot;: {&quot;;
    String Str3 = &quot;        \&quot;origin\&quot;: \&quot;serviceoperations\&quot;,&quot;;
    String Str4 = &quot;        \&quot;mimeType\&quot;&quot; + &quot;: &quot; + &quot;\&quot;tiff\&quot;&quot; + &quot;,&quot;;
    String Str5 = &quot;        \&quot;category\&quot;&quot; + &quot;: &quot; + &quot;\&quot;apservicejacket\&quot;&quot; + &quot;,&quot;;
    String Str6 = &quot;        \&quot;originFileCreationTS\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${originFileCreationTS}&quot; + &quot;T&quot; + Copydt2 + milisec + &quot;Z&quot; + &quot;\&quot;,&quot;;
    String Str7 = &quot;        \&quot;originFileRequestTS\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${originFileRequestTS}&quot; + &quot;T&quot; + Copydt2 + milisec + &quot;Z&quot; + &quot;\&quot;&quot;;
    String Str8 = &quot;    },&quot;;
    String Str9 = &quot;    \&quot;filemetadata\&quot;: {&quot;;
    String Str10 = &quot;        \&quot;fileName\&quot;: \&quot;&quot; + &quot;${fileName}&quot; +&quot;\&quot;&quot;+&quot;,&quot;;
    String Str11 = &quot;        \&quot;dmsImageId\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${dmsImageId}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str12 = &quot;        \&quot;storeNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${storeNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str13 = &quot;        \&quot;orderNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${orderNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str14 = &quot;        \&quot;poNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${poNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str15 = &quot;        \&quot;scanStatus\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${scanStatus}&quot; +&quot;\&quot;&quot; + &quot;,&quot;;
    String Str16 = &quot;        \&quot;vehicleIdentificationNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${vehicleIdentificationNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str17 = &quot;        \&quot;corporateCopyDate\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + timeStampConv + &quot;\&quot;&quot; ;
    String Str18 = &quot;    }&quot;;
    String Str19 = &quot;}&quot;;


    //Write Order number to the file
    FileWriter fWriter = new FileWriter(filepath, true);
    BufferedWriter buff = new BufferedWriter(fWriter);
    buff.write(Str1 + &quot;\n&quot; + Str2 + &quot;\n&quot; + Str3 + &quot;\n&quot; + Str4 + &quot;\n&quot; + Str5 + &quot;\n&quot; + Str6 + &quot;\n&quot; + Str7 + &quot;\n&quot; + Str8 + &quot;\n&quot; +
        Str9 + &quot;\n&quot; + Str10 + &quot;\n&quot; + Str11 + &quot;\n&quot; + Str12 + &quot;\n&quot; + Str13 + &quot;\n&quot; + Str14 + &quot;\n&quot; + Str15 + &quot;\n&quot; + Str16 + &quot;\n&quot; +
        Str17 + &quot;\n&quot; + Str18 + &quot;\n&quot; + Str19);
    buff.close();
    fWriter.close();
}</stringProp>
            <stringProp name="scriptLanguage">bsh</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ID</stringProp>
            <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;(.+?)\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-APServiceJacket-TIFF-MetaDataDownload-QA" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=true&amp;data=false</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="&apos;Authorization&apos;" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${testPlanFileDir}\Response\metadata\ServiceOp2_tiff_metadata_</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <stringProp name="FileSaver.variablename">Tiff_metadata</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-APServiceJacket-TIFF-Update-QA" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;filemetadata&quot;: {&#xd;
        &quot;fileName&quot;: &quot;update_${fileName}&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="&apos;Authorization&apos;" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${testPlanFileDir}\Response\update\ServiceOp2_tiff_update_</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <stringProp name="FileSaver.variablename">tiff_update</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-APServiceJacket-TIFF-Download-QA" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=false&amp;data=true</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="&apos;Authorization&apos;" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${testPlanFileDir}\Response\download\ServiceOp2_tiff_download_</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <stringProp name="FileSaver.variablename">tiff_download</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API-APServiceCorpJacket-TIFF-QA" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">300</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-APServiceCorpJacket-TIFF-Upload-QA" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${testPlanFileDir}\TestData\APServiceCorpJacket_Test.tiff" elementType="HTTPFileArg">
                <stringProp name="File.path">${testPlanFileDir}\TestData\APServiceCorpJacket_Test.tiff</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">image/tiff</stringProp>
              </elementProp>
              <elementProp name="${testPlanFileDir}\TestData\APServiceCorpJacket_Test_tiff.json" elementType="HTTPFileArg">
                <stringProp name="File.path">${testPlanFileDir}\TestData\APServiceCorpJacket_Test_tiff.json</stringProp>
                <stringProp name="File.paramname">jsonFileDetail</stringProp>
                <stringProp name="File.mimetype">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">./Input/APServiceCorporateJacket_TIFF_Input.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">fileName,dmsImageId,storeNumber,orderNumber,poNumber,scanStatus,vehicleIdentificationNumber,originFileCreationTS, originFileRequestTS</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JsonFileGenerator" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
package com.create.test;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Properties;
import java.util.Random;
import java.util.stream.IntStream;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.lang.reflect.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.FileUtils;

int maxfileint = 1;
int jsonFileName = 0;

Random random = new Random();


//Locate current script path
String testPlanFile = GuiPackage.getInstance().getTestPlanFile();
String testPlanFileDir = FilenameUtils.getFullPathNoEndSeparator(testPlanFile);
vars.put(&quot;testPlanFileDir&quot;, testPlanFileDir);

//Source &amp; Destination folder with file
String filepath = testPlanFileDir + &quot;/TestData/APServiceCorpJacket_Test_tiff.json&quot;;

//Delete the existing json files in the current folder:
//List files = FileUtils.listFiles(new File(testPlanFileDir + &quot;/TestData/ServiceJacket_Test_tiff&quot;), new String[] {&quot;json&quot;}, true);
//for (File file: files) {
//    file.delete();
//}

File file1 = new File(filepath);
if (file1.exists()) {
file1.delete(); 
}


for (int i = 1; i &lt;= maxfileint; i++) {

    Date date = new Date();
    String patternformat1 = &quot;yyyy-MM-dd&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(patternformat1);
    String Copydt1 = simpleDateFormat.format(date);

    String patternformat2 = &quot;HH:mm:ss.&quot;;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(patternformat2);
    String Copydt2 = simpleDateFormat.format(date);

    int randomsec = random.nextInt(899) + 100;
    String milisec = randomsec.toString();
    String timeStampConv = Copydt1 + &quot;T&quot; + Copydt2 + milisec + &quot;Z&quot;;   

    String Str1 = &quot;{&quot;;
    String Str2 = &quot;    \&quot;info\&quot;: {&quot;;
    String Str3 = &quot;        \&quot;origin\&quot;: \&quot;serviceoperations\&quot;,&quot;;
    String Str4 = &quot;        \&quot;mimeType\&quot;&quot; + &quot;: &quot; + &quot;\&quot;tiff\&quot;&quot; + &quot;,&quot;;
    String Str5 = &quot;        \&quot;category\&quot;&quot; + &quot;: &quot; + &quot;\&quot;apservicecorporatejacket\&quot;&quot; + &quot;,&quot;;
    String Str6 = &quot;        \&quot;originFileCreationTS\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${originFileCreationTS}&quot; + &quot;T&quot; + Copydt2 + milisec + &quot;Z&quot; + &quot;\&quot;,&quot;;
    String Str7 = &quot;        \&quot;originFileRequestTS\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${originFileRequestTS}&quot; + &quot;T&quot; + Copydt2 + milisec + &quot;Z&quot; + &quot;\&quot;&quot;;
    String Str8 = &quot;    },&quot;;
    String Str9 = &quot;    \&quot;filemetadata\&quot;: {&quot;;
    String Str10 = &quot;        \&quot;fileName\&quot;: \&quot;&quot; + &quot;${fileName}&quot; +&quot;\&quot;&quot;+&quot;,&quot;;
    String Str11 = &quot;        \&quot;dmsImageId\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${dmsImageId}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str12 = &quot;        \&quot;storeNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${storeNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str13 = &quot;        \&quot;orderNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${orderNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str14 = &quot;        \&quot;poNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${poNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str15 = &quot;        \&quot;scanStatus\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${scanStatus}&quot; +&quot;\&quot;&quot; + &quot;,&quot;;
    String Str16 = &quot;        \&quot;vehicleIdentificationNumber\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + &quot;${vehicleIdentificationNumber}&quot; + &quot;\&quot;&quot; + &quot;,&quot;;
    String Str17 = &quot;        \&quot;corporateCopyDate\&quot;&quot; + &quot;: &quot; + &quot;\&quot;&quot; + timeStampConv + &quot;\&quot;&quot; ;
    String Str18 = &quot;    }&quot;;
    String Str19 = &quot;}&quot;;


    //Write Order number to the file
    FileWriter fWriter = new FileWriter(filepath, true);
    BufferedWriter buff = new BufferedWriter(fWriter);
    buff.write(Str1 + &quot;\n&quot; + Str2 + &quot;\n&quot; + Str3 + &quot;\n&quot; + Str4 + &quot;\n&quot; + Str5 + &quot;\n&quot; + Str6 + &quot;\n&quot; + Str7 + &quot;\n&quot; + Str8 + &quot;\n&quot; +
        Str9 + &quot;\n&quot; + Str10 + &quot;\n&quot; + Str11 + &quot;\n&quot; + Str12 + &quot;\n&quot; + Str13 + &quot;\n&quot; + Str14 + &quot;\n&quot; + Str15 + &quot;\n&quot; + Str16 + &quot;\n&quot; +
        Str17 + &quot;\n&quot; + Str18 + &quot;\n&quot; + Str19);
    buff.close();
    fWriter.close();
}</stringProp>
            <stringProp name="scriptLanguage">bsh</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ID</stringProp>
            <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;(.+?)\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-APServiceCorpJacket-TIFF-MetaDataDownload-QA" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=true&amp;data=false</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="&apos;Authorization&apos;" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${testPlanFileDir}\Response\metadata\ServiceOp3_tiff_metadata_</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <stringProp name="FileSaver.variablename">Tiff_metadata</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-APServiceCorpJacket-TIFF-Update-QA" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;filemetadata&quot;: {&#xd;
        &quot;fileName&quot;: &quot;update_${fileName}&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="&apos;Authorization&apos;" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${testPlanFileDir}\Response\update\ServiceOp3_tiff_update_</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <stringProp name="FileSaver.variablename">tiff_update</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-APServiceCorpJacket-TIFF-Download-QA" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.contentservice.carmax.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ecmapi/v1/file/${ID}?information=false&amp;data=true</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="&apos;Authorization&apos;" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjZWNtZmxuc2FsZXNxYTpnZ1gjdldVeysmdjZhYg==</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${testPlanFileDir}\Response\download\ServiceOp3_tiff_download_</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <stringProp name="FileSaver.variablename">tiff_download</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
          </ResultSaver>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>

<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="tiff" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">12000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1800</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">10</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="tiff" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
import com.create.test.java.io.File;
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="tiff" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
package com.create.test;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Properties;
import java.util.Random;
import java.util.stream.IntStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.lang.reflect.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.text.DecimalFormat;
import java.util.Date;


int maxfileint = 1;
			
			String tiffSampleCompletePath = &quot;\\\\clbflncolq21\\MoveFile\\Sample_Testfiles\\edoc\\2020_test_tiff_edoc_01.tiff&quot;;
			
			File tiffSampleCompletePathFile = new File(tiffSampleCompletePath);  

//			System.out.println(&quot;i am before for&quot;);
//			System.out.println(&quot;maxfileint&quot; + maxfileint);
			
			Random random = new Random();
			
			//System.out.println(pdfParentPath);
			Date date = new Date();
              
              long timestamp = date.getTime();
              DecimalFormat df = new DecimalFormat(&quot;##################################&quot;);
			String timestamp_new = 	df.format(timestamp).toString();
			log.info(timestamp_new);
              
//              String random1 = &quot;use the random number generator&quot;;
//                           
//              String filename = &quot;2021_test_tiff_edoc_1_&quot; + df.format(timestamp) + &quot;_&quot; +random1 + &quot;.tiff&quot;;
//			log.info(filename);
//			log.info(df.format(timestamp));
//			log.info(df.format(timestamp));
			
			for (int i = 1; i &lt;= maxfileint; i++) {
				
			
//				System.out.println(&quot;i am inside for&quot;);
			
		
				int randomint = random.nextInt(1000000 -  1) ;
				
				String tiffdestinationPath = &quot;\\\\CLBFLNFSSQ21FS\\AIMCorporateScan\\image\\&quot; + &quot;2021_test_tiff_AIMCORP_&quot; + i +&quot;_&quot;+ timestamp_new + &quot;_&quot;+ randomint +&quot;.tiff&quot;;
				//Create TIFF

//				System.out.println(&quot;file copy&quot;);
				log.info(tiffdestinationPath);
				
			

		InputStream inStream = null;
        OutputStream outStream = null;

        File inputFile =new File(tiffSampleCompletePath);
        File outputFile =new File(tiffdestinationPath);

        inStream = new FileInputStream(inputFile);
        outStream = new FileOutputStream(outputFile);

        byte[] buffer = new byte[1024];


        int fileLength;
        while ((fileLength = inStream.read(buffer)) &gt; 0){

              outStream.write(buffer, 0, fileLength );

              }

        inStream.close();
        outStream.close();
				
				
				DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
				DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
				Document doc = dBuilder.newDocument();

				// root vehicles element
				Element rootElement = doc.createElement(&quot;invoices&quot;);
				doc.appendChild(rootElement);

				// vehicle element
				Element invoice = doc.createElement(&quot;invoice&quot;);
				rootElement.appendChild(invoice);

				// element
				Element dmsimageid = doc.createElement(&quot;dmsimageid&quot;);
				dmsimageid.appendChild(doc.createTextNode(&quot;6188241&quot;));
				invoice.appendChild(dmsimageid);
				
				Element locnum = doc.createElement(&quot;locnum&quot;);
				locnum.appendChild(doc.createTextNode(&quot;7233&quot;));
				invoice.appendChild(locnum);
				
				Element locstate = doc.createElement(&quot;locstate&quot;);
				locstate.appendChild(doc.createTextNode(&quot;TN&quot;));
				invoice.appendChild(locstate);
				
				Element corpcopydt = doc.createElement(&quot;corpcopydt&quot;);
				corpcopydt.appendChild(doc.createTextNode(&quot;12/12/2021 12:00:00&quot;));
				invoice.appendChild(corpcopydt);

				Element docpath = doc.createElement(&quot;docpath&quot;);
				
				docpath.appendChild(doc.createTextNode(tiffdestinationPath));
				invoice.appendChild(docpath);

				Element dmsdoctype = doc.createElement(&quot;dmsdoctype&quot;);
				dmsdoctype.appendChild(doc.createTextNode(&quot;2&quot;));
				invoice.appendChild(dmsdoctype);
			      
				Element processcode = doc.createElement(&quot;processcode&quot;);
				processcode.appendChild(doc.createTextNode(&quot;4&quot;));
				invoice.appendChild(processcode);

				Element scanstatus = doc.createElement(&quot;scanstatus&quot;);
				scanstatus.appendChild(doc.createTextNode(&quot;1&quot;));
				invoice.appendChild(scanstatus);

				Element formid = doc.createElement(&quot;formid&quot;);
				formid.appendChild(doc.createTextNode(&quot;40000201&quot;));
				invoice.appendChild(formid);

				Element versionid = doc.createElement(&quot;versionid&quot;);
				versionid.appendChild(doc.createTextNode(&quot;1&quot;));
				invoice.appendChild(versionid);

				Element description = doc.createElement(&quot;description&quot;);
				description.appendChild(doc.createTextNode(&quot;AIM Invoice Document&quot;));
				invoice.appendChild(description);

				Element referencenum = doc.createElement(&quot;referencenum&quot;);
				referencenum.appendChild(doc.createTextNode(&quot;25741830&quot;));
				invoice.appendChild(referencenum);

				Element invoicenum = doc.createElement(&quot;invoicenum&quot;);
				invoicenum.appendChild(doc.createTextNode(&quot;06102021-1&quot;));
				invoice.appendChild(invoicenum);
				
				// write the content into xml file
				TransformerFactory transformerFactory = TransformerFactory.newInstance();
				Transformer transformer = transformerFactory.newTransformer();
				DOMSource source = new DOMSource(doc);
			
				StreamResult result = new StreamResult(new File(&quot;\\\\CLBFLNFSSQ21FS\\AIMCorporateScan\\xml\\New\\&quot; + &quot;2021_test_tiff_AIMCORP_&quot; +  i +&quot;_&quot;+ timestamp_new + &quot;_&quot;+ randomint+&quot;.xml&quot;));
				transformer.transform(source, result);
				String copySourcePath = &quot;\\\\CLBFLNFSSQ21FS\\AIMCorporateScan\\xml\\New\\&quot; + &quot;2021_test_tiff_AIMCORP_&quot; +  i +&quot;_&quot;+ timestamp_new + &quot;_&quot;+ randomint+&quot;.xml&quot;;
				String copyDestinationPath = &quot;\\\\CLBFLNFSSQ21FS\\AIMCorporateScan\\xml\\&quot; + &quot;2021_test_tiff_AIMCORP_&quot; +  i +&quot;_&quot;+ timestamp_new + &quot;_&quot;+ randomint+&quot;.xml&quot;;
				vars.put(&quot;copySourcePath&quot;,copySourcePath);
				vars.put(&quot;copyDestinationPath&quot;,copyDestinationPath);
				//Files.move(Paths.get(&quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\xml_tiff\\new\\&quot; + &quot;2021_test_tiff_edoc_&quot; +  i +&quot;_&quot;+ randomint+&quot;.xml&quot;), Paths.get(&quot;\\\\CLBFLNFSSQ21FS\\T3EDocStaging01\\xml_tiff\\&quot; + &quot;2021_test_tiff_edoc_&quot; +  i +&quot;_&quot;+ randomint+&quot;.xml&quot;),StandardCopyOption.ATOMIC_MOVE);				
			}
</stringProp>
            <stringProp name="scriptLanguage">bsh</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler tiff" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">move</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${copySourcePath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${copyDestinationPath}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">2000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
